\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename util-say.info
@settitle util-say
@afourpaper
@documentencoding UTF-8
@documentlanguage en
@finalout
@c %**end of header
@set VERSION 3.0

@defindex op


@copying
This manual is for util-say
(version @value{VERSION}).

Copyright @copyright{} 2013 Mattias Andrée

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@node Top
@top util-say: Tools for creating ponies for ponysay and ponysay-like programs
@insertcopying
@end ifnottex

@titlepage
@title util-say
@subtitle Tools for creating ponies for ponysay and ponysay-like programs
@subtitle Covers util-say version @value{VERSION}.
@c ** start of front page image **
@c If print make a pdf or hard copy with the front cover
@c you may or may not want to remove this.
@c @image{infoimage,423.5px}
@c ** end of front page image **
@author by Mattias Andrée (maandree)

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@menu
* Overview::                            Brief overview of util-say.
* Background::                          Brief background.
* Using the converter::                 Using the converter, @command{ponytool}.
* GNU Free Documentation License::      Copying and sharing this manual.
* Concept index::                       Concept index.
* Option index::                        Option index.
@end menu




@node Overview
@chapter Overview
@cindex overview

util-say was historically collection of utilities for creating images for ponysay,
cowsay and similiar programs, hence its name. Nowadays however, it is basically
one utility with a set of modules, called @command{ponytool}.

@command{ponytool} is used convert an image into another format or change the image's
configurations. Theses images are images be simply rendered in a terminal, and
naturally normal images formats are supported so normal images can be made into
terminal renderable.



@node Background
@chapter Background
@cindex background
@cindex terminal images
@cindex images, terminal

@cindex glyphs
@cindex Unicode
@cindex UCS
@cindex monospaced fonts
@cindex fonts, monospaces
@cindex block elements
Unicode defines glyphs made for drawing, specifically it defines block elements,
these include glyphs that splits the glyph area vertically in half and definied
all for combinations for filling or keeping empty each half. The empty glyphs
beginng the blankspace character. In monospaced fonts theses are definied to
be of same size.

@cindex font dimensions
@cindex dimensions, font
@cindex pixel perfect
@cindex mosiac, structure
A font that precisly adheres to the previous paragraph and have the total font
exactly height twice of the width is called pixel perfect to the extend of the
our usage. This lets or use just four, or even only three, glyphs to build
mosiac pictures of characters representing two pixels each, vertically stacked.

@cindex colour
An essential part of letting one glyph represent two pixels is that terminals
support both foreground and background colours, as well as 240 well definied
colours as well as full transparency.

This is the foundation that lets use print nice looking images in the terminal,
and it can be done in @command{cat}:able text files, for details on the formats
please refer to the documentation for that specific program.



@node Using the converter
@appendix Using the converter
@cindex converter
@cindex @command{ponytool}

@cindex importing
@cindex exporting
The command @command{ponytool} is used to convert images between formats and
configurations, it has the capability of importing one file and exporting
multiple files. As you may notice, @command{ponytool} does not support short
options, only long options, and all options takes exactly one argument.

@cindex invoking
@cindex selecting file
@cindex file, select
@opindex @option{import}
@opindex @option{export}
@opindex @option{in}
@opindex @option{out}
@opindex @option{file}
To use the converter, run command
@command{ponytool --import module [parameters...] @{--export module [parameters...]@}}.
Note that parameters must be added after their @option{--import} or
@option{--export}. Alternatively you can use @option{--in} instead of
@option{--import} or @option{--out} instead of @option{--export}.
Associated with @option{--import} and @option{--export} is a module take
must follow directly. All modules, before for export and import, honors
@option{--file} that takes the file to read to or write from and defaults
to stdin or stdout, @code{-} begin the explicit value for those, and will
note be listed in the module's documention's.



@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texinfo


@node Concept index
@appendix Concept index
@printindex cp

@node Option index
@appendix Option index
@printindex op


@bye

